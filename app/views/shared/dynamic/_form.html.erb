  <%tmp_readonly = params[:action]=='show' || (@setup_controller[:readonly_exists] && @instance["read_only"]=='Y')
    if @setup_controller[:mandatory_exists] && !tmp_readonly%>
	  <h4><%= field_description "DonnÃ©es obligatoires".trn, true %></h4>
  <%end%>

  <%if @instance.respond_to?('model_type')%>
    <%=hidden_field(:instance, :model_type,:value => @instance.class.name)%>
  <%end%>

	<%@columns_screen.each do |column|
		display = column["display_#{params[:action]}".to_sym]
		value_field = @instance.respond_to?(column[:name]) ? @instance.send(column[:name]) : ""
		if (display.nil? ? true : display) && column[:name].split('.').count==1%>

		  <div class="form-group">
		
		    <label for=<%="instance_#{column[:name]}"%> class="col-sm-3 control-label">
			  <%if column[:mandatory] && !tmp_readonly%>
	  			  <%= field_description "", true %>
	    	  <%end%>
			  <%unless column[:column_name].blank?%>
	    		<%=column[:column_name]%> :
	    	  <%end%>
		    </label>
  		    <div class="col-sm-8">
			<%if column[:name] == 'sequence'%>
				<%= text_field(:instance, column[:name],{:disabled => true,:readonly => tmp_readonly, :class => "form-control"})%>
			<%elsif column[:name] == 'parent_id'%>
				<%=hidden_field(:instance, column[:name],:value => (@parent.blank? ? 0 : @parent.id))%>
				<%= text_field(:dummy, :parent,{:disabled => true,:readonly => tmp_readonly, :class => "form-control", :value => (@parent.blank? ? "Origine" : @parent.name), :style=> "width:inherit;"})%>
    		<%else%>
			  <% case column[:type]%>
		      <% when "info" %>
	  		  	<p><%=column[:info]||''%></p>
		      <% when "separate" %>
	  		  	<hr/>
		      <% when "integer" %>
			        <% if column[:foreign] 
			             column_class = Object.const_defined?(column[:model_linked]) ? column[:model_linked].constantize : nil
			             column_name = nil
			             unless column_class.nil?
				             column_name = column[:model_linked_field] if column_name.nil? && column_class.new.respond_to?(column[:model_linked_field])		             
				             column_name = "id" if column_name.nil? && column_class.new.respond_to?("id") 
			             end		             
			             unless column_name.nil?
			             %>
			            <%=  collection_select(:instance, column[:name], column_class.all, :id, column_name.to_sym, {:prompt => ""},:disabled => (tmp_readonly ? "disabled" : false), :class => "form-control") %>
			          <% else %>
						<%= text_field :instance, column[:name],:class=>"inputmask form-control","data-inputmask"=>"'alias': 'integer'",:readonly => tmp_readonly, :style=> "width:inherit;"%>
			          <% end %>
			        <% else %>
						<%= text_field :instance, column[:name],:class=>"inputmask form-control","data-inputmask"=>"'alias': 'integer'",:readonly => tmp_readonly, :style=> "width:25%;"%>
			        <% end %>
		      <% when "list" 
		      		if !column[:value_list].blank?
		      			value_list = column[:value_list].split(",")
		      		elsif !column[:value_list_method].blank? && @instance.respond_to?(column[:value_list_method])
		      			value_list = @instance.send(column[:value_list_method])
		      		else
		      			value_list = []
		      		end
		      	%>
	            <%=  select(:instance, column[:name], value_list, {:prompt => ""},:disabled => (tmp_readonly ? "disabled" : false), :class => "form-control") %>
		      <% when "list_group" 
		      		if !column[:value_list].blank?
		      			value_list = column[:value_list]
		      		elsif !column[:value_list_method].blank? && @instance.respond_to?(column[:value_list_method])
		      			value_list = @instance.send(column[:value_list_method])
		      		else
		      			value_list = []
		      		end
		      	%>
	            <%=  select(:instance, column[:name], grouped_options_for_select(value_list,value_field), {:prompt => ""},:disabled => (tmp_readonly ? "disabled" : false), :class => "form-control") %>
		      <% when "association" %>
		       <%
		             column_class = ( column[:model_linked].present? && Object.const_defined?(column[:model_linked])) ? column[:model_linked].constantize : nil
		             column_name = nil
		             unless column_class.nil?
			             column_name = column[:model_linked_field] if column[:model_linked_field].present? && column_name.nil? && column_class.new.respond_to?(column[:model_linked_field])		             
			             column_name = "id" if column_name.nil? && column_class.new.respond_to?("id") 
		             end		             
		      	 if !column_class.nil? && !column_name.nil?
		      %>
	              <%=  collection_select(:instance, column[:name], column_class.all, :id, column_name.to_sym, {:prompt => ""},:multiple => "multiple",:disabled => (tmp_readonly ? "disabled" : false), :class => "form-control") %>
		      <% end
		         when "list_multi" %>
	            <%=  select(:instance, column[:name], column[:value_list].split(","), {:selected => value_field.split(",")},:multiple=>true, :disabled => (tmp_readonly ? "disabled" : false), :class => "form-control") %>
		      <% when "float", "decimal" %>
				<%= text_field :instance, column[:name],:class=>"inputmask form-control","data-inputmask"=>"'alias': 'decimal', 'groupSeparator': ',', 'autoGroup': true",:readonly => tmp_readonly, :style=> "width:inherit;"%>
			  <% when "string" 
			  		if column[:value_list].blank?%>
						<%= text_field :instance, column[:name],:class=>"form-control",:readonly => tmp_readonly,:size=>column[:length_field], :maxlength=>column[:length_value], :style=> "width:inherit;"%>
					<%else%>	  
					    <%=select(:instance, column[:name], column[:value_list].split(','), { include_blank: true},{:disabled => (tmp_readonly ? "disabled" : false),:style=> "width:inherit;", :class => "form-control" })%>
					<%end%>	  
			  <% when "text" %>
		        <%= text_area :instance, column[:name],:readonly => tmp_readonly,:class=>"span_12 form-control",:rows=>5  %>
			  <% when "list_free" %>
		        <%= text_area :instance, column[:name],:readonly => tmp_readonly,:class=>"span_12 form-control",:rows=>5,:value=>value_field.gsub(',',"\r") %>
		      <% when "datetime","date","time" 
		        value = value_field
		        value = value.strftime("%d/%m/%Y %H:%M:%S") unless value.blank?
		        if tmp_readonly%>				
					<%= text_field :instance, column[:name],:class=>"col-md-2 form-control",:readonly => tmp_readonly %>
				<%else%>
				    <div class="input-group date" data-behaviour='datetimepicker' data-date="<%=value%>">
					    <input id="instance_<%=column[:name]%>" name="instance[<%=column[:name]%>]" class="col-md-2" type="text" value="<%=value%>" readonly>
					    <span class="input-group-addon"><i class="glyphicon glyphicon-th"></i></span>
					</div>
				<%end%>
		      <% when "boolean" %>
		        <%= check_box :instance, column[:name],{:readonly => tmp_readonly, :class => ""}, column[:checked_value]||"1", column[:unchecked_value]||"0" %>
			  <% when "file"%>
			  	<%if column[:option_file].blank?%>
					<%= text_field :instance, column[:name],:class=>"col-md-2 form-control",:readonly => tmp_readonly %>
				<%else%>
	            	<%= easy_tag('file',:instance => "instance", :field => column[:name],:value=> value_field, :read_only=> tmp_readonly, :option_file => column[:option_file], :class => "window_fixed") %>
				<%end%>
			  <% when "link"%>
            	<%= easy_tag('link',:instance => "instance", :field => column[:name],:value=> value_field, :read_only=> tmp_readonly) %>
		      <% else %>
				<span class="uneditable-input"><%=value_field%></span>		      	
		      <% end %>		
	    	  
    		<%end%>
			<%unless ['sequence','parent_id'].include?(column[:name])%>
			  <%unless column[:column_text].blank?%>
			  	<span class='help-block'>
	  			  <%= column[:column_text]	%>
			  	</span>
	    	  <%end%>
    		<%end%>
		    </div>
		    

  		  </div>

	  <%end
     end%>
  
<script>
	init_datepicker();	
	init_inputmask();		
</script>  
